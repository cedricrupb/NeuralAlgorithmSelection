digraph CFA {
8 [shape="circle" label="N8\n31"]
35 [shape="circle" label="N35\n30"]
36 [shape="circle" label="N36\n29"]
37 [shape="circle" label="N37\n28"]
38 [shape="circle" label="N38\n27"]
39 [shape="circle" label="N39\n26"]
9 [shape="circle" label="N9\n25"]
10 [shape="circle" label="N10\n24"]
11 [shape="circle" label="N11\n23"]
12 [shape="circle" label="N12\n22"]
13 [shape="circle" label="N13\n21"]
14 [shape="doublecircle" label="N14\n20"]
17 [shape="circle" label="N17\n19"]
20 [shape="circle" label="N20\n18"]
21 [shape="circle" label="N21\n17"]
22 [shape="doublecircle" label="N22\n16"]
25 [shape="circle" label="N25\n15"]
27 [shape="circle" label="N27\n14"]
28 [shape="circle" label="N28\n13"]
29 [shape="doublecircle" label="N29\n12"]
32 [shape="circle" label="N32\n11"]
7 [shape="circle" label="N7\n10"]
31 [shape="circle" label="N31\n9"]
1 [shape="circle" label="N1\n6"]
2 [shape="diamond" label="N2\n5"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
33 [shape="circle" label="N33\n8"]
30 [shape="circle" label="N30\n7"]
4 [shape="circle" label="N4\n4"]
5 [shape="circle" label="N5\n3"]
6 [shape="circle" label="N6\n2"]
24 [shape="circle" label="N24\n6"]
26 [shape="circle" label="N26\n5"]
23 [shape="circle" label="N23\n4"]
16 [shape="circle" label="N16\n3"]
18 [shape="circle" label="N18\n2"]
19 [shape="circle" label="N19\n1"]
15 [shape="circle" label="N15\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
1 -> 2 [label="Function start dummy edge"]
2 -> 4 [label="[cond == 0]"]
2 -> 3 [label="[!(cond == 0)]"]
3 -> 0 [label="default return"]
4 -> 5 [label="Label: ERROR"]
5 -> 6 [label="__VERIFIER_error();"]
6 -> 3 [label=""]}
subgraph cluster_main {
label="main()"
8 -> 35 [label="INIT GLOBAL VARS"]
35 -> 36 [label="void __VERIFIER_error();"]
36 -> 37 [label="void __VERIFIER_assert(int cond);"]
37 -> 38 [label="int __VERIFIER_nondet_int();"]
38 -> 39 [label="int main();"]
39 -> 9 [label="Function start dummy edge"]
9 -> 10 [label="int a1[100000];"]
10 -> 11 [label="int a2[100000];"]
11 -> 12 [label="int a;"]
12 -> 13 [label="for"]
13 -> 14 [label="a = 0;"]
14 -> 16 [label="[a < 100000]"]
14 -> 17 [label="[!(a < 100000)]"]
17 -> 20 [label="int i;"]
20 -> 21 [label="for"]
21 -> 22 [label="i = 0;"]
22 -> 24 [label="[i < 100000]"]
22 -> 25 [label="[!(i < 100000)]"]
25 -> 27 [label="int x;"]
27 -> 28 [label="for"]
28 -> 29 [label="x = 0;"]
29 -> 31 [label="[x < 100000]"]
29 -> 32 [label="[!(x < 100000)]"]
32 -> 7 [label="return 0;"]
31 -> 33 [label="__VERIFIER_assert((a1[x]) == (a2[x]));" style="dotted" arrowhead="empty"]
31 -> 33 [label="__VERIFIER_assert((a1[x]) == (a2[x]));"]
33 -> 30 [label=""]
30 -> 29 [label="x = x + 1;"]
24 -> 26 [label="a1[i] = a1[i];"]
26 -> 23 [label=""]
23 -> 22 [label="i = i + 1;"]
16 -> 18 [label="a1[a] = __VERIFIER_nondet_int();"]
18 -> 19 [label="a2[a] = __VERIFIER_nondet_int();"]
19 -> 15 [label=""]
15 -> 14 [label="a = a + 1;"]}
31 -> 1 [label="__VERIFIER_assert((a1[x]) == (a2[x]))"]
0 -> 33 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((a1[x]) == (a2[x]));"]}